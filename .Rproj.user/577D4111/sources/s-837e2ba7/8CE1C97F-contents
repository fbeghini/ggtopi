---
title: "GG_topi2"
author: "Francesco Beghini"
date: "26/09/2018"
output: 
  html_document: 
    theme: cerulean
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(message = FALSE, warning = FALSE, paged.print=FALSE, echo=FALSE)
knitr::opts_chunk$set(fig.width=12, fig.height=8) 
library(phyloseq)
library(magrittr)
library(tidyverse)
library(reshape2)
library(ggsignif)
library(DESeq2)
```

```{r load qiime, cache=TRUE, include=FALSE}
gg_topi <- import_biom(BIOMfilename = 'grandi/otus_silva/otu_table_mc10_w_tax.biom',
                         treefilename = 'grandi/otus_silva/rep_set.tre',
                         refseqfilename = 'grandi/otus_silva/rep_set.fna',
                        refseqFunction = parse_taxonomy_default
                      )
mappingfile <- read.delim('grandi/mappingfile', row.names = 1, check.names = FALSE)
mappingfile$Description %<>% str_replace_all(.,'_','-')
sample_names(gg_topi) <- mappingfile[sample_names(gg_topi), 'Description']
rownames(mappingfile) <- mappingfile$Description

sample_data(gg_topi) <- mappingfile
sample_data(gg_topi)$id.topo <- factor(sample_data(gg_topi)$id.topo)
sample_data(gg_topi)$pentatome <- stringr::str_sub(sample_data(gg_topi)$condizione,1,2)

colnames(tax_table(gg_topi)) <- c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species")

tax_table_filtered <- tax_table(gg_topi) %>%
  as.data.frame %>% 
  mutate_all( .funs = function(x) stringr:::str_replace_all(x,"D_.__",""))

rownames(tax_table_filtered) <- rownames(tax_table(gg_topi))
tax_table(gg_topi) <-  as.matrix(tax_table_filtered)
```
# Taxonomy profile at genus level
```{r taxonomy, cache=FALSE}
nychanesmicrobiome::plot_abundance(gg_topi,taxrank = 'Genus')
```

VVP: Vuote + PBS

VPP: Pentatoma + PBS

VVB: Vuote + *Bifidobacterium*

VPB: Pentatoma + *Bifidobacterium*

# Alpha diversity and read distribution
```{r Alpha diversity}
otu_table(gg_topi) %>% colSums() %>% sort %>% barplot(xlab = c())
otu_table(gg_topi) %>% colSums() %>% summary()

alpha_div <- estimate_richness(gg_topi)
alpha_div %<>% bind_cols(data.frame(sample_data(gg_topi)))

x <- melt(alpha_div, id.vars = c('Description','condizione','timepoint'), measure.vars =  c('Observed', 'se.chao1', 'Simpson', 'Shannon'))
x$value <- as.numeric(x$value)

ggplot(x) +
  geom_boxplot(aes(timepoint, value)) +
  facet_grid(variable~condizione,scales = 'free_y')
```

# Beta diversity
```{r Beta diversity}
distwu <- phyloseq::distance(gg_topi, "wunifrac")
ordwu <-  ordinate(gg_topi, method = "MDS", distance = distwu, weighted = TRUE)

plot_ordination(gg_topi, ordwu, color = 'condizione',shape = 'timepoint', title = 'Weighted UniFrac')
plot_ordination(gg_topi, ordwu, color = 'merge_timepoint', title = 'Weighted UniFrac')

distances <- melt(as.matrix(distwu), varnames = c('rows','cols'))
distances$condizione1 <- sapply(as.character(distances$rows), function(x) strsplit(x,'-')[[1]][2])
distances$condizione2 <- sapply(as.character(distances$cols), function(x) strsplit(x,'-')[[1]][2])
distances$topo1 <- factor(sapply(as.character(distances$rows), function(x) strsplit(x,'-')[[1]][3]))
distances$topo2 <- factor(sapply(as.character(distances$cols), function(x) strsplit(x,'-')[[1]][3]))
distances$timepoint1 <- str_replace(sapply(as.character(distances$rows), function(x) strsplit(x,'-')[[1]][4]), 'T', '') %>% as.numeric
distances$timepoint2 <- str_replace(sapply(as.character(distances$cols), function(x) strsplit(x,'-')[[1]][4]), 'T', '') %>% as.numeric
distances %<>% filter(rows!=cols)
```

### Merge T1 and T2 and use them as baseline
## Beta diversity between timepoints, T1 is the baseline
```{r Beta diversity between timepoints t1}
distances[distances$timepoint1 == 1 | distances$timepoint1 == 2, 'timepoint1'] <- 2
distances[distances$timepoint2 == 1 | distances$timepoint2 == 2, 'timepoint2'] <- 2

t1 <- distances %>% 
  filter(topo1==topo2) %>%
  filter(timepoint1==2) %>%
  filter(timepoint1!=timepoint2) %>%
  arrange(topo1)

t.res <- data.frame()
for(cond in unique(t1$condizione1)){
  for(x in combn(c(3:7), 2, simplify = FALSE)){
    pval.t = t.test(t1[t1$timepoint2==x[1] & t1$condizione1==cond,"value"], t1[t1$timepoint2==x[2] & t1$condizione1==cond ,"value"])$p.value
    pval.w = wilcox.test(t1[t1$timepoint2==x[1] & t1$condizione1==cond,"value"], t1[t1$timepoint2==x[2] & t1$condizione1==cond ,"value"], paired = F)$p.value
    if(pval.t < 0.05 | pval.w < 0.05)
      t.res %<>% bind_rows(c(condizione1=cond, timepoint=as.numeric(x), p.value = str_c('t-test:',signif(pval.t, digits = 2),'U-test:', signif(pval.w, digits = 2), sep = ' ')))
    }
  }

```

```{r}
knitr::kable(t.res)
```

```{r}

t1 %>%
  ggplot(aes(timepoint2, value, group = timepoint2)) +
  stat_boxplot() +
  scale_x_continuous(breaks = c(2:7)) +
  # geom_signif(data=t.res,
              # aes(xmin= as.numeric(timepoint1), xmax = as.numeric(timepoint2), annotations = p.value, y_position = 0.33),
              # manual = TRUE) +
  facet_grid(condizione1 ~ .)
  
```

## Beta diversity between timepoints, T(-1) is the baseline
```{r Beta diversity between timepoints tn-1}
tn1 <- distances %>% 
  filter(topo1==topo2) %>%
  filter(timepoint1==timepoint2-1) %>%
  filter(timepoint1!=timepoint2) %>%
  arrange(topo1)

t.res <- data.frame()
for(cond in unique(tn1$condizione1)){
  for(x in combn(c(3:7), 2, simplify = FALSE)){
      pval.t = t.test(tn1[tn1$timepoint2==x[1] & tn1$condizione1==cond,"value"], tn1[tn1$timepoint2==x[2] & tn1$condizione1==cond ,"value"])$p.value
      pval.w = wilcox.test(tn1[tn1$timepoint2==x[1] & tn1$condizione1==cond,"value"], tn1[tn1$timepoint2==x[2] & tn1$condizione1==cond ,"value"], paired = F)$p.value
      if(pval.t < 0.05 | pval.w < 0.05)
        t.res %<>% bind_rows(c(condizione1=cond, timepoint=as.numeric(x), p.value = str_c('t-test:',signif(pval.t, digits = 2),'U-test:', signif(pval.w, digits = 2), sep = ' ')))
  }
}
```

```{r}
knitr::kable(t.res)
```

```{r}
tn1 %>%
  ggplot(aes(timepoint2, value, group = timepoint2)) +
  geom_boxplot() +
  scale_x_continuous(breaks = c(2:7)) +
  # geom_signif(data=t.res,
              # aes(xmin= as.numeric(timepoint1), xmax = as.numeric(timepoint2), annotations = p.value, y_position = 0.33),
              # manual = TRUE) +
  facet_grid(condizione1 ~ .)
```

## Differential analysis
```{r DA}
threshold <- 0.05
dds <- DESeq2::DESeq(phyloseq_to_deseq2(gg_topi, design = ~ merge_timepoint + condizione + merge_timepoint:condizione), parallel = TRUE, quiet = TRUE)
```

```{r DA T1 vs T2}
res12 <- DESeq2::results(dds, contrast = c("merge_timepoint","baseline","T3"))
res12.filtered <- res12[!is.na(res12$padj),]
res12.filtered <- res12.filtered[res12.filtered$padj < threshold,]

res12.filtered %>% as.data.frame %>% cbind(as.matrix(tax_table(gg_topi)[rownames(res12.filtered),])) %>%
  ggplot(aes(log2FoldChange, Genus)) + 
  geom_vline(xintercept = 0.0, color = "gray", size = 0.5) +
  geom_point(size=3, aes(color = padj)) + 
  facet_grid(Phylum ~ ., scales = "free", space = "free_y",switch = "y",as.table = T)+
  theme_bw() +
  ggtitle('Baseline(T1+T2) vs Timepoint 3') +
  scale_y_discrete(position = "right") +
  theme(axis.text = element_text(hjust = 0, vjust=0.5, size = 11),
        strip.text = element_text(size = 9),
        axis.title = element_text(size = 9),
        axis.title.y = element_blank(),
        strip.background = element_rect(colour = "transparent", fill = "transparent"),
        strip.text.y = element_text(angle = 180)
  )
```


```{r DA T3 vs T4}
res23 <- DESeq2::results(dds, contrast = c("merge_timepoint","T3","T4"))
res23.filtered <- res23[!is.na(res23$padj),]
res23.filtered <- res23.filtered[res23.filtered$padj < threshold,]

res23.filtered %>% as.data.frame %>% cbind(as.matrix(tax_table(gg_topi)[rownames(res23.filtered),])) %>%
  ggplot(aes(log2FoldChange, Genus)) + 
  geom_vline(xintercept = 0.0, color = "gray", size = 0.5) +
  geom_point(size=3, aes(color = log2FoldChange)) + 
  facet_grid(Phylum ~ ., scales = "free", space = "free_y",switch = "y",as.table = T)+
  theme_bw() +
  ggtitle('Timepoint 3 vs Timepoint 4') +
  scale_y_discrete(position = "right") +
  theme(axis.text = element_text(hjust = 0, vjust=0.5, size = 11),
        strip.text = element_text(size = 9),
        axis.title = element_text(size = 9),
        axis.title.y = element_blank(),
        strip.background = element_rect(colour = "transparent", fill = "transparent"),
        strip.text.y = element_text(angle = 180)
)
```


```{r}
res12.filtered[res12.filtered$log2FoldChange > 3 | res12.filtered$log2FoldChange < -3,]
```

```{r DA}
threshold <- 0.05
dds <- DESeq2::DESeq(phyloseq_to_deseq2(gg_topi, design = ~ merge_timepoint + condizione + merge_timepoint:condizione), parallel = TRUE, quiet = TRUE)
```

```{r DA T1 vs T2}
res12 <- DESeq2::results(dds, contrast = c("merge_timepoint","baseline","T3"))
res12.filtered <- res12[!is.na(res12$padj),]
res12.filtered <- res12.filtered[res12.filtered$padj < threshold,]

res12.filtered %>% as.data.frame %>% cbind(as.matrix(tax_table(gg_topi)[rownames(res12.filtered),])) %>%
  ggplot(aes(log2FoldChange, Genus)) + 
  geom_vline(xintercept = 0.0, color = "gray", size = 0.5) +
  geom_point(size=3, aes(color = padj)) + 
  facet_grid(Phylum ~ ., scales = "free", space = "free_y",switch = "y",as.table = T)+
  theme_bw() +
  ggtitle('Baseline(T1+T2) vs Timepoint 3') +
  scale_y_discrete(position = "right") +
  theme(axis.text = element_text(hjust = 0, vjust=0.5, size = 11),
        strip.text = element_text(size = 9),
        axis.title = element_text(size = 9),
        axis.title.y = element_blank(),
        strip.background = element_rect(colour = "transparent", fill = "transparent"),
        strip.text.y = element_text(angle = 180)
  )
```

```{r}
threshold <- 0.05
dds_pentatome <- DESeq2::DESeq(phyloseq_to_deseq2(gg_topi, design = ~ merge_timepoint + pentatome + merge_timepoint:pentatome), parallel = TRUE, quiet = TRUE)

res_pentatome <- DESeq2::results(dds_pentatome, contrast = c("pentatome","pentatome_VV_vs_VP","merge_timepointT3.pentatomeVV"))
res_pentatome.filtered <- res_pentatome[!is.na(res_pentatome$padj),]
res_pentatome.filtered <- res_pentatome.filtered[res_pentatome.filtered$padj < threshold,]

res_pentatome.filtered %>% as.data.frame %>% cbind(as.matrix(tax_table(gg_topi)[rownames(res_pentatome.filtered),])) %>%
  ggplot(aes(log2FoldChange, Genus)) + 
  geom_vline(xintercept = 0.0, color = "gray", size = 0.5) +
  geom_point(size=3, aes(color = padj)) + 
  facet_grid(Phylum ~ ., scales = "free", space = "free_y",switch = "y",as.table = T)+
  theme_bw() +
  ggtitle('Baseline(T1+T2) vs Timepoint 3') +
  scale_y_discrete(position = "right") +
  theme(axis.text = element_text(hjust = 0, vjust=0.5, size = 11),
        strip.text = element_text(size = 9),
        axis.title = element_text(size = 9),
        axis.title.y = element_blank(),
        strip.background = element_rect(colour = "transparent", fill = "transparent"),
        strip.text.y = element_text(angle = 180)
  )
```


# Tracking OTU EU622777.1.1487 (Lachnospiraceae NK4A136)
```{r}
counts <- data.frame(count = otu_table(gg_topi)['EU622777.1.1487',] %>% t) %>% tibble::rownames_to_column('sampleid')
counts$t <- sapply(as.character(counts$sampleid), function(x) strsplit(x,'-')[[1]][4])
counts$condizione <- sapply(as.character(counts$sampleid), function(x) strsplit(x,'-')[[1]][2])
reshape2::melt(counts, id.vars = c('t', 'condizione'), measure.vars = 'EU622777.1.1487') %>%
  ggplot() +
  stat_boxplot(aes(t, value)) + 
  facet_grid(condizione ~ ., scales = "free_x", space="free_y")
```

# Tracking OTU EU504401.1.1405 (Muribaculaceae￼)
```{r}
counts <- data.frame(count = otu_table(gg_topi)['EU504401.1.1405',] %>% t) %>% tibble::rownames_to_column('sampleid')
counts$t <- sapply(as.character(counts$sampleid), function(x) strsplit(x,'-')[[1]][4])
counts$condizione <- sapply(as.character(counts$sampleid), function(x) strsplit(x,'-')[[1]][2])
reshape2::melt(counts, id.vars = c('t', 'condizione'), measure.vars = 'EU504401.1.1405') %>%
  ggplot() +
  stat_boxplot(aes(t, value)) + 
  facet_grid(condizione ~ ., scales = "free_x", space="free_y")
```